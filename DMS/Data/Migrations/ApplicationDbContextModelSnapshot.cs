// <auto-generated />
using System;
using DMS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DMS.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DMS.Models.City", b =>
                {
                    b.Property<int>("City_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("City_Id"));

                    b.Property<string>("City_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Country_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Status_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Updated_By")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("City_Id");

                    b.HasIndex("Country_Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DMS.Models.Company", b =>
                {
                    b.Property<int>("Company_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Company_Id"));

                    b.Property<string>("Address_Line_1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address_Line_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("City_Id")
                        .HasColumnType("int");

                    b.Property<string>("Company_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_Person_Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_Person_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_Person_Emirates_Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_Person_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_Person_Passport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact_Person_Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Country_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Funds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("License_Expiry_Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Ownership")
                        .HasColumnType("int");

                    b.Property<string>("ProofOfFundsPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trade_License_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Unit_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Updated_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip_Code")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Company_Id");

                    b.HasIndex("City_Id");

                    b.HasIndex("Country_Id");

                    b.HasIndex("Unit_Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("DMS.Models.CompanyDocument", b =>
                {
                    b.Property<string>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DocumentExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DocumentIssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FilePath1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("ReviewedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReviewedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Updated_By")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("CompanyDocuments");
                });

            modelBuilder.Entity("DMS.Models.Country", b =>
                {
                    b.Property<int>("Country_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Country_Id"));

                    b.Property<string>("Country_Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency_Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone_Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Updated_By")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Country_Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DMS.Models.DocumentType", b =>
                {
                    b.Property<string>("DocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Updated_By")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentTypeId");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("DMS.Models.Installments", b =>
                {
                    b.Property<int>("Installment_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Installment_Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Installment_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("Payment_Plan_Id")
                        .HasColumnType("int");

                    b.Property<int>("Sequence_Number")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Updated_By")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Installment_Id");

                    b.HasIndex("Payment_Plan_Id");

                    b.ToTable("Installments");
                });

            modelBuilder.Entity("DMS.Models.Payment_Plans", b =>
                {
                    b.Property<int>("Payment_Plan_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Payment_Plan_Id"));

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Plan_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Plan_Status")
                        .HasColumnType("bit");

                    b.Property<int?>("Project_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Updated_By")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Payment_Plan_Id");

                    b.HasIndex("Project_Id");

                    b.ToTable("Payment_Plans");
                });

            modelBuilder.Entity("DMS.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Address_Country_Id")
                        .HasColumnType("int");

                    b.Property<string>("Address_Line_1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address_Line_2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Alternate_Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("City_Id")
                        .HasColumnType("int");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Emirates_Id_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Emireate_Id_Expiry_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Employer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Marital")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NationalityCountry_Id")
                        .HasColumnType("int");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ownership")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PassportCountry_Id")
                        .HasColumnType("int");

                    b.Property<int?>("PassportNationality_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Passport_Expiry_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Passport_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Passport_Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Person_Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Person_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProofOfFundsPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Unit_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Updated_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Zip_Code")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Address_Country_Id");

                    b.HasIndex("City_Id");

                    b.HasIndex("NationalityCountry_Id");

                    b.HasIndex("PassportCountry_Id");

                    b.HasIndex("PassportNationality_Id");

                    b.HasIndex("Unit_Id");

                    b.HasIndex("UserId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("DMS.Models.Project", b =>
                {
                    b.Property<int>("Project_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Project_Id"));

                    b.Property<int?>("City_Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Completion_Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Constructed_Area")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Construction_Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Country_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Plot_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Project_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Project_Land_Area")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Project_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Project_Seller_Id")
                        .HasColumnType("int");

                    b.Property<string>("Project_Used")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Saleable_Area")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Total_Floors")
                        .HasColumnType("int");

                    b.Property<int>("Total_Units")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Updated_By")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Project_Id");

                    b.HasIndex("City_Id");

                    b.HasIndex("Country_Id");

                    b.HasIndex("Project_Seller_Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("DMS.Models.ProjectSellerAdminFee", b =>
                {
                    b.Property<int>("Project_Seller_Admin_Fee_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Project_Seller_Admin_Fee_Id"));

                    b.Property<string>("Admin_Fee_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Admin_Fee_Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("OQoob_Fee_Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OQood_Fee_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Other_Charges")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Project_Id")
                        .HasColumnType("int");

                    b.Property<string>("Rera_Fee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rera_Fee_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Updated_By")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Project_Seller_Admin_Fee_Id");

                    b.HasIndex("Project_Id");

                    b.ToTable("ProjectSellerAdminFee");
                });

            modelBuilder.Entity("DMS.Models.Project_Seller", b =>
                {
                    b.Property<int>("Project_Seller_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Project_Seller_Id"));

                    b.Property<string>("Authorized_Signature_Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Authorized_Signature_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Seller_Company_Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Seller_Company_Licence_Expiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Seller_Company_License_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seller_Company_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Updated_By")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Project_Seller_Id");

                    b.ToTable("Project_Sellers");
                });

            modelBuilder.Entity("DMS.Models.RolePermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Add")
                        .HasColumnType("bit");

                    b.Property<bool>("All")
                        .HasColumnType("bit");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModelloName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Readonly")
                        .HasColumnType("bit");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("DMS.Models.UnitBuyer", b =>
                {
                    b.Property<int>("UnitBuyer_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitBuyer_Id"));

                    b.Property<string>("BuyerType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Company_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMainBuyer")
                        .HasColumnType("bit");

                    b.Property<int?>("Person_Id")
                        .HasColumnType("int");

                    b.Property<int>("Unit_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Updated_By")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnitBuyer_Id");

                    b.HasIndex("Company_Id");

                    b.HasIndex("Person_Id");

                    b.HasIndex("Unit_Id");

                    b.ToTable("UnitBuyer");
                });

            modelBuilder.Entity("DMS.Models.UnitType", b =>
                {
                    b.Property<int>("Unity_Type_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Unity_Type_Id"));

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Project_Id")
                        .HasColumnType("int");

                    b.Property<string>("Unit_Type_Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unity_Type_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Updated_By")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Unity_Type_Id");

                    b.HasIndex("Project_Id");

                    b.ToTable("UnitTypes");
                });

            modelBuilder.Entity("DMS.Models.Units", b =>
                {
                    b.Property<int>("Unit_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Unit_Id"));

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_By")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("External_Unit_Size_Sqft")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Floor_Number")
                        .HasColumnType("int");

                    b.Property<decimal>("Interal_Unit_Size_Sqft")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Project_Id")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total_Size_Sqft")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Unit_Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Unit_Type_Id")
                        .HasColumnType("int");

                    b.Property<string>("Unit_View")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Updated_By")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Unit_Id");

                    b.HasIndex("Project_Id");

                    b.HasIndex("Unit_Type_Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("DMS.Models.Users", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Commission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmiratesIdPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FundsPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PlainPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DMS.Models.City", b =>
                {
                    b.HasOne("DMS.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("Country_Id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DMS.Models.Company", b =>
                {
                    b.HasOne("DMS.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("City_Id");

                    b.HasOne("DMS.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("Country_Id");

                    b.HasOne("DMS.Models.Units", "Unit")
                        .WithMany()
                        .HasForeignKey("Unit_Id");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("DMS.Models.CompanyDocument", b =>
                {
                    b.HasOne("DMS.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMS.Models.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMS.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("DocumentType");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DMS.Models.Installments", b =>
                {
                    b.HasOne("DMS.Models.Payment_Plans", "Payment_Plans")
                        .WithMany()
                        .HasForeignKey("Payment_Plan_Id");

                    b.Navigation("Payment_Plans");
                });

            modelBuilder.Entity("DMS.Models.Payment_Plans", b =>
                {
                    b.HasOne("DMS.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("Project_Id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DMS.Models.Person", b =>
                {
                    b.HasOne("DMS.Models.Country", "AddressCountry")
                        .WithMany()
                        .HasForeignKey("Address_Country_Id");

                    b.HasOne("DMS.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("City_Id");

                    b.HasOne("DMS.Models.Country", "NationalityCountry")
                        .WithMany()
                        .HasForeignKey("NationalityCountry_Id");

                    b.HasOne("DMS.Models.Country", "PassportCountry")
                        .WithMany()
                        .HasForeignKey("PassportCountry_Id");

                    b.HasOne("DMS.Models.Country", "PassportNationality")
                        .WithMany()
                        .HasForeignKey("PassportNationality_Id");

                    b.HasOne("DMS.Models.Units", "Unit")
                        .WithMany()
                        .HasForeignKey("Unit_Id");

                    b.HasOne("DMS.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AddressCountry");

                    b.Navigation("City");

                    b.Navigation("NationalityCountry");

                    b.Navigation("PassportCountry");

                    b.Navigation("PassportNationality");

                    b.Navigation("Unit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DMS.Models.Project", b =>
                {
                    b.HasOne("DMS.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("City_Id");

                    b.HasOne("DMS.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("Country_Id");

                    b.HasOne("DMS.Models.Project_Seller", "Project_Seller")
                        .WithMany()
                        .HasForeignKey("Project_Seller_Id");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Project_Seller");
                });

            modelBuilder.Entity("DMS.Models.ProjectSellerAdminFee", b =>
                {
                    b.HasOne("DMS.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("Project_Id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DMS.Models.RolePermissions", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DMS.Models.UnitBuyer", b =>
                {
                    b.HasOne("DMS.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("Company_Id");

                    b.HasOne("DMS.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("Person_Id");

                    b.HasOne("DMS.Models.Units", "Units")
                        .WithMany()
                        .HasForeignKey("Unit_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Person");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("DMS.Models.UnitType", b =>
                {
                    b.HasOne("DMS.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("Project_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DMS.Models.Units", b =>
                {
                    b.HasOne("DMS.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("Project_Id");

                    b.HasOne("DMS.Models.UnitType", "UnitType")
                        .WithMany()
                        .HasForeignKey("Unit_Type_Id");

                    b.Navigation("Project");

                    b.Navigation("UnitType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DMS.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DMS.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DMS.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DMS.Models.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
